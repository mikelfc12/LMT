import numpy as np
from scipy.optimize import linear_sum_assignment

matrix = np.array([
[1.66995768688293, 1.74333333333333, 1.28333333333333, 1.36333333333333, 1.44333333333333, 1.5625, 1.16333333333333, 1.02333333333333, 1.16333333333333, 0.903333333333333, 1.50333333333333, 1.28333333333333],
[1.66995768688293, 1.74333333333333, 1.28333333333333, 1.36333333333333, 1.44333333333333, 1.5625, 1.16333333333333, 1.02333333333333, 1.16333333333333, 0.903333333333333, 1.50333333333333, 1.28333333333333],
[1.07052186177715, 0.92, 1.18, 0.96, 0.96, 1.04, 0.84, 1.42, 0.84, 0.94, 0.72, 1.16],
[1.07052186177715, 0.92, 1.18, 0.96, 0.96, 1.04, 0.84, 1.42, 0.84, 0.94, 0.72, 1.16],
[1.7739380849532, 1.18, 0.84, 1.37083333333333, 1.28, 1.76, 1.3, 1.5, 1.52, 1.57916666666667, 1.76, 0.92],
[1.30697674418605, 1.28, 1.04, 1.74, 1.48, 1.26, 1.24, 0.82, 1.44, 1.5, 0.86, 1.55916666666667],
[0.512363996043521, 1.66, 2.04, 1.8, 1.58, 1.12, 1.65083333333333, 1.56, 2.04, 1.74, 1.2, 1.46],
[1.81617371770872, 1.44, 1.6, 1.4, 1.52, 1.56, 1.2, 1.32, 1.9, 1.9, 1.32, 1.66],
[0.326902465166131, 1.03083333333333, 0.84, 1.08, 0.5, 0.96, 1.18, 1.42, 0.94, 1.16, 1.04, 0.72],
[2.12539726553335, 1.38, 1.76, 1.91916666666667, 1.6, 1.84, 1.62, 1.22, 1.26, 1.18, 2.1, 2.1],
[0.964002879769618, 1.88, 1.16, 1.4, 1.18, 1.42, 1.54, 1.58, 0.96, 1.42, 1.69916666666667, 1],
[0.964002879769618, 1.88, 1.16, 1.4, 1.18, 1.42, 1.54, 1.58, 0.96, 1.42, 1.69916666666667, 1]
])

# Convert the matrix to a cost matrix
cost_matrix = np.max(matrix) - matrix

# Use linear_sum_assignment to find the optimal assignment
row_indices, col_indices = linear_sum_assignment(cost_matrix)

# Extract the selected elements
selected_elements = matrix[row_indices, col_indices]

# Calculate the sum of selected elements
sum_of_selected_elements = np.sum(selected_elements)

print("Row Indices:", row_indices)
print("Column Indices:", col_indices)
print("Selected Elements:", selected_elements)
print("Sum of Selected Elements:", sum_of_selected_elements)